#ifndef __CUDA__EMISSION__INCLUDED__
#define __CUDA__EMISSION__INCLUDED__

#include <cuda.h>
#include <cuda_runtime.h>
#include <cmath>
#include <iostream>
#include "emissionfunction.h" //Includes main.h ParameterReader.h Table.h

//This header declares a GPU dependent function for the class emissionfunction
 
#define threadsPerBlock 256
#define blocksPerGrid     8

//Performs Cooper-Frye integrals for chosen particles.

__global__ void cooperFrye( int FO_length, int number_of_chosen_particles, int pT_tab_length, int phi_tab_length, int eta_tab_length, double* dN_pTdpTdphidy_d, double*pT_d, double* trig_d, double* hyperTrig_d, double* delta_eta_d, double* mass_d, double* sign_d, double* degen_d, int* baryon_d, double* gammaT_d, double* ux_d, double* uy_d, double* mu_d, double* muB_d, double* Tdec_d, double* da0_d, double* da1_d, double* da2_d, double* tau_d, double prefactor)
{
        //Declare a shared array to dump intermeddiate results
        __shared__ double temp[threadsPerBlock];

        //Assign a global index and a local index

        int idx      = threadIdx.x + blockDim.x*blockIdx.x;
        int localIdx = threadIdx.x;

        int counter = 0; //used in dumping results into spectrum array
        int roundedFO_length;
        if(localIdx == 0)
                roundedFO_length = threadsPerBlock*( (FO_length + threadsPerBlock - 1)/threadsPerBlock);
        __syncthreads();
        while(idx < roundedFO_length)
        {
                for(int mmidx = 0; mmidx<number_of_chosen_particles*pT_tab_length*phi_tab_length; mmidx++)
                {
                        temp[localIdx] = 0;
                        //If thread is outside the range of the surface, skip calculations
                        if(idx<FO_length){
                        //Count over pT, then phi, then particle
                        int pTIdx       = mmidx % pT_tab_length;
                        int phiIdx      = (mmidx/pT_tab_length)%phi_tab_length;
                        int partIdx     = mmidx/(pT_tab_length*phi_tab_length);
                        double px       = pT_d[pTIdx]*trig_d[phiIdx+phi_tab_length];
                        double py       = pT_d[pTIdx]*trig_d[phiIdx];
                        double mT       = sqrt(mass_d[partIdx]*mass_d[partIdx]+pT_d[pTIdx]*pT_d[pTIdx]);
                        for(int k=0; k<eta_tab_length; k++)
                        {
                                double pt = mT*hyperTrig_d[k+eta_tab_length];
                                double pz = mT*hyperTrig_d[k];

                                double pdotu = pt*gammaT_d[idx] - px*ux_d[idx] - py*uy_d[idx];
                                double expon = (pdotu - mu_d[idx*number_of_chosen_particles + partIdx] - baryon_d[partIdx]*muB_d[idx]) / Tdec_d[idx];
                                double f0      = 1./(exp(expon)+sign_d[partIdx]);
                                double pdsigma = pt*da0_d[idx] + px*da1_d[idx] + py*da2_d[idx];
                                //double delta_f_shear = 0.0;
                                //double delta_f_bulk = 0.0;
                                //Insert statements calculating delta_f here, ignoring it for testing
                                //double ratio = min(1., fabs( 1./(delta_f_shear + delta_f_bulk) ));
                                double result = prefactor*degen_d[partIdx]*pdsigma*tau_d[idx]*f0;//*(1. + (delta_f_shear + delta_f_bulk*ratio));
                                temp[localIdx] += result*delta_eta_d[k];
                        }}//finish if(idx<FO_length)

                        int N = blockDim.x;
                        __syncthreads(); //Make sure threads are prepared for reduction

                        do
                        {
                                //Will probably never be used, but put in defensively
                                if( (N%2!=0) && (localIdx ==0) )
                                        temp[0]        += temp[N-1]; //N was odd!
                                N /= 2;
                                if(localIdx < N)        temp[localIdx] += temp[localIdx + N];
                                //__syncthreads         //Test if this is needed
                        }while(N!=1);
                        int spectra_size = number_of_chosen_particles*pT_tab_length*phi_tab_length;
                        if(localIdx == 0) dN_pTdpTdphidy_d[(counter*gridDim.x + blockIdx.x)*spectra_size +  mmidx] = temp[0];
                }
                idx += gridDim.x*blockDim.x;
                counter++;
        }
}

//Does a block sum, where the previous kernel did a thread sum. This is a straightforward 
__global__ void reduction(double* dN_pTdpTdphidy_d, int FO_length, int final_spectrum_size)
{
        unsigned int idx = threadIdx.x + blockDim.x*blockIdx.x;
        //max is the number of blocks used in the previous kernel
        int max          = (FO_length + threadsPerBlock - 1)/threadsPerBlock;
        while(idx<final_spectrum_size)
        {
                if(max==1) return; //Probably will never happen, but best to be careful
                //Need to start at i=1, since adding everything to i=0
                for(int i=1;i<max;i++)
                        dN_pTdpTdphidy_d[idx] += dN_pTdpTdphidy_d[idx + i*final_spectrum_size];
                idx += gridDim.x*blockDim.x;
        }
}


void EmissionFunctionArray::calculate_dN_ptdptdphidy_GPU()
{
        //Convert object data into arrays the GPU can more easily work with
        //Particle Properties
        double  mass[number_of_chosen_particles];
        double  sign[number_of_chosen_particles];
        double  degen[number_of_chosen_particles];
        int     baryon[number_of_chosen_particles];

        //Momentum properties
        double  pT[pT_tab_length];
        double  trig[2*phi_tab_length];         //Contains sin then cos for discrete phi, no sense in calculating them 50,000 times
        double  hyperTrig[2*eta_tab_length];    //Same as above, but cosh and sinh
        double  delta_eta[eta_tab_length];      //These are the weights for quadrature

        //Freeze out surface properties
        double Tdec[FO_length];
        double Pdec[FO_length];
        double Edec[FO_length];
        //mu will enumerate mu for all particles before increasing to next cell
        double mu[FO_length*number_of_chosen_particles];
        double tau[FO_length];
        double gammaT[FO_length];
        double ux[FO_length];
        double uy[FO_length];
        double da0[FO_length];
        double da1[FO_length];
        double da2[FO_length];
        double pi00[FO_length];
        double pi01[FO_length];
        double pi02[FO_length];
        double pi11[FO_length];
        double pi12[FO_length];
        double pi22[FO_length];
        double pi33[FO_length];
        double muB[FO_length];
        //Below = # of blocks * # of particles * # of momenta
        long   spectrum_size = ( (FO_length + threadsPerBlock - 1)/threadsPerBlock )*number_of_chosen_particles*pT_tab_length*phi_tab_length;
        double dN_pTdpTdphidy[spectrum_size];
	cout << "This is before any variables assigned"<<endl;
        //Fill arrays with data
        for(int i=0; i<spectrum_size; i++) dN_pTdpTdphidy[i] = 0;
	cout<<"This is number_of_chosen_particles"  << number_of_chosen_particles << endl;
        for(int i=0; i<number_of_chosen_particles; i++)
        {
        	cout << "in loop "<< i << endl;
	        int            particle_idx  = chosen_particles_sampling_table[i];
		cout << "particle_idx = " << particle_idx << endl;
                particle_info *particle      = &particles[particle_idx];

                mass[i]   = particle->mass  ;
                sign[i]   = particle->sign  ;
                degen[i]  = particle->gspin ;
                baryon[i] = particle->baryon;
        }
	cout << "Working before the loop" << endl;	
        for(int i=0;              i<pT_tab_length;  i++) pT[i]        = pT_tab->get(1, i+1);
	cout << "Working after too" << endl;
        for(int i=0;              i<phi_tab_length; i++) trig[i]      = sin( phi_tab->get(1, i+1) );
        for(int i=0;              i<phi_tab_length; i++) trig[i+phi_tab_length] = cos( phi_tab->get(1, i+1) );
        
	//I do not know what particle_y is, but the original code uses it
        for(int i=0;              i<eta_tab_length; i++) hyperTrig[i] = sinh(particle_y - eta_tab->get(1, i+1) );
        for(int i=0;               i<eta_tab_length; i++) hyperTrig[i+eta_tab_length] = cosh( particle_y - eta_tab->get(1, i+1) );
        for(int i=0;              i<eta_tab_length; i++) delta_eta[i] = eta_tab->get(2, i+1);

        for(int i=0; i<FO_length; i++)
        {
                FO_surf *surf = &FOsurf_ptr[i];

                Tdec[i] = surf->Tdec;
                Pdec[i] = surf->Pdec;
                Edec[i] = surf->Edec;
                for(int j=0; j<number_of_chosen_particles;j++)
                {
                        int particle_idx  = chosen_particles_sampling_table[j];
                        mu[i*number_of_chosen_particles + j] = surf->particle_mu[particle_idx];
                }
                tau[i]   = surf->tau;
                gammaT[i]= surf->u0;
                ux[i]    = surf->u1;
                uy[i]    = surf->u2;
                da0[i]   = surf->da0;
                da1[i]   = surf->da1;
                da2[i]   = surf->da2;
                pi00[i]  = surf->pi00;
                pi01[i]  = surf->pi01;
                pi02[i]  = surf->pi02;
                pi11[i]  = surf->pi11;
                pi12[i]  = surf->pi12;
                pi22[i]  = surf->pi22;
                pi33[i]  = surf->pi33;
                muB[i]   = surf->muB;

        }
	
        //Make device copies of all of these arrays
        double *mass_d;
        double *sign_d;
        double *degen_d;
        int    *baryon_d;

        //Momentum properties
        double *pT_d;
        double *trig_d;
        double *hyperTrig_d;
        double *delta_eta_d;

        //Freeze out surface properties
        double *Tdec_d;
        double *Pdec_d;
        double *Edec_d;
        double *mu_d;
        double *tau_d;
        double *gammaT_d;
        double *ux_d;
        double *uy_d;
        double *da0_d;
        double *da1_d;
        double *da2_d;
        double *pi00_d;
        double *pi01_d;
        double *pi02_d;
        double *pi11_d;
        double *pi12_d;
        double *pi22_d;
        double *pi33_d;
        double *muB_d;
        double *dN_pTdpTdphidy_d;

/*
        //Allocate a lot of memory on device
        cudaMalloc( (void**) &mass_d,   number_of_chosen_particles*sizeof(double)       );
        cudaMalloc( (void**) &sign_d,   number_of_chosen_particles*sizeof(double)       );
        cudaMalloc( (void**) &degen_d,  number_of_chosen_particles*sizeof(double)       );
        cudaMalloc( (void**) &baryon_d, number_of_chosen_particles*sizeof(int)          );
        cudaMalloc( (void**) &pT_d,     pT_tab_length*sizeof(double)                    );
        cudaMalloc( (void**) &trig_d,   2*phi_tab_length*sizeof(double)                 );
        cudaMalloc( (void**) &hyperTrig_d,   2*eta_tab_length*sizeof(double)            );
        cudaMalloc( (void**) &delta_eta_d, eta_tab_length*sizeof(double)                );
        cudaMalloc( (void**) &Tdec_d,   FO_length*sizeof(double)                        );
        cudaMalloc( (void**) &Pdec_d,   FO_length*sizeof(double)                        );
        cudaMalloc( (void**) &Edec_d,   FO_length*sizeof(double)                        );
        cudaMalloc( (void**) &mu_d,     number_of_chosen_particles*FO_length*sizeof(double)  );
        cudaMalloc( (void**) &tau_d,    FO_length*sizeof(double)                        );
        cudaMalloc( (void**) &gammaT_d, FO_length*sizeof(double)                        );
        cudaMalloc( (void**) &ux_d,     FO_length*sizeof(double)                        );
        cudaMalloc( (void**) &uy_d,     FO_length*sizeof(double)                        );
        cudaMalloc( (void**) &da0_d,    FO_length*sizeof(double)                        );
        cudaMalloc( (void**) &da1_d,    FO_length*sizeof(double)                        );
        cudaMalloc( (void**) &da2_d,    FO_length*sizeof(double)                        );
        cudaMalloc( (void**) &pi00_d,   FO_length*sizeof(double)                        );
        cudaMalloc( (void**) &pi01_d,   FO_length*sizeof(double)                        );
        cudaMalloc( (void**) &pi02_d,   FO_length*sizeof(double)                        );
        cudaMalloc( (void**) &pi11_d,   FO_length*sizeof(double)                        );
        cudaMalloc( (void**) &pi12_d,   FO_length*sizeof(double)                        );
        cudaMalloc( (void**) &pi22_d,   FO_length*sizeof(double)                        );
        cudaMalloc( (void**) &pi33_d,   FO_length*sizeof(double)                        );
        cudaMalloc( (void**) &muB_d,    FO_length*sizeof(double)                        );
        cudaMalloc( (void**) &dN_pTdpTdphidy_d, spectrum_size*sizeof(double)            );

        //Copy the CPU variables to GPU
        cudaMemcpy( mass_d,   mass,   number_of_chosen_particles*sizeof(double), cudaMemcpyHostToDevice );
        cudaMemcpy( sign_d,   sign,   number_of_chosen_particles*sizeof(double), cudaMemcpyHostToDevice );
        cudaMemcpy( degen_d,  degen,  number_of_chosen_particles*sizeof(double), cudaMemcpyHostToDevice );
        cudaMemcpy( baryon_d, baryon, number_of_chosen_particles*sizeof(int),    cudaMemcpyHostToDevice );
        cudaMemcpy( pT_d,     pT,     pT_tab_length*sizeof(double),              cudaMemcpyHostToDevice );
        cudaMemcpy( trig_d,   trig,   2*phi_tab_length*sizeof(double),         cudaMemcpyHostToDevice );
        cudaMemcpy( hyperTrig_d,    hyperTrig,  2*eta_tab_length*sizeof(double), cudaMemcpyHostToDevice );
        cudaMemcpy( delta_eta_d, delta_eta, eta_tab_length*sizeof(double),       cudaMemcpyHostToDevice );
        cudaMemcpy( Tdec_d,   Tdec,   FO_length*sizeof(double),                    cudaMemcpyHostToDevice );
        cudaMemcpy( Pdec_d,   Pdec,   FO_length*sizeof(double),                    cudaMemcpyHostToDevice );
        cudaMemcpy( Edec_d,   Edec,   FO_length*sizeof(double),                    cudaMemcpyHostToDevice );
        cudaMemcpy( mu_d,     mu,     number_of_chosen_particles*FO_length*sizeof(double), cudaMemcpyHostToDevice );
        cudaMemcpy( tau_d,    tau,    FO_length*sizeof(double),                    cudaMemcpyHostToDevice );
        cudaMemcpy( gammaT_d, gammaT, FO_length*sizeof(double),                    cudaMemcpyHostToDevice );
        cudaMemcpy( ux_d,     ux,     FO_length*sizeof(double),                    cudaMemcpyHostToDevice );
        cudaMemcpy( uy_d,     uy,     FO_length*sizeof(double),                    cudaMemcpyHostToDevice );
        cudaMemcpy( da0_d,    da0,    FO_length*sizeof(double),                    cudaMemcpyHostToDevice );
        cudaMemcpy( da1_d,    da1,    FO_length*sizeof(double),                    cudaMemcpyHostToDevice );
        cudaMemcpy( da2_d,    da2,    FO_length*sizeof(double),                    cudaMemcpyHostToDevice );
        cudaMemcpy( pi00_d,   pi00,   FO_length*sizeof(double),                    cudaMemcpyHostToDevice );
        cudaMemcpy( pi01_d,   pi01,   FO_length*sizeof(double),                    cudaMemcpyHostToDevice );
        cudaMemcpy( pi02_d,   pi02,   FO_length*sizeof(double),                    cudaMemcpyHostToDevice );
        cudaMemcpy( pi11_d,   pi11,   FO_length*sizeof(double),                    cudaMemcpyHostToDevice );
        cudaMemcpy( pi12_d,   pi12,   FO_length*sizeof(double),                    cudaMemcpyHostToDevice );
        cudaMemcpy( pi22_d,   pi22,   FO_length*sizeof(double),                    cudaMemcpyHostToDevice );
        cudaMemcpy( pi33_d,   pi33,   FO_length*sizeof(double),                    cudaMemcpyHostToDevice );
        cudaMemcpy( dN_pTdpTdphidy_d, dN_pTdpTdphidy, spectrum_size*sizeof(double), cudaMemcpyHostToDevice );
        //Perform kernels, first inital cooper Frye and reduction acriss threads, second is another reduction across blocks
	double prefactor = 1.0/(8.0*(M_PI*M_PI*M_PI))/hbarC/hbarC/hbarC;

        cooperFrye<<<blocksPerGrid,threadsPerBlock>>>( FO_length, number_of_chosen_particles, pT_tab_length, phi_tab_length, eta_tab_length, dN_pTdpTdphidy_d, pT_d, trig_d, hyperTrig_d, delta_eta_d, mass_d, sign_d, degen_d, baryon_d, gammaT_d, ux_d, uy_d, mu_d, muB, Tdec_d, da0_d, da1_d, da2_d, tau, prefactor);

        int final_spectrum_size = number_of_chosen_particles*pT_tab_length*phi_tab_length;
        int blocks = (final_spectrum_size + threadsPerBlock -1)/threadsPerBlock;
        reduction<<<blocks,threadsPerBlock>>>(dN_pTdpTdphidy_d, FO_length, final_spectrum_size);

        //Copy spectra back to host
        cudaMemcpy( dN_pTdpTdphidy,   dN_pTdpTdphidy_d,   number_of_chosen_particles*pT_tab_length*phi_tab_length*sizeof(double),  cudaMemcpyDeviceToHost );
	
	
        //Write results to files
        for(int i=0; i<number_of_chosen_particles; i++)
        {
                for (int pTIdx=0; pTIdx<pT_tab_length; pTIdx++)
                for (int phiIdx=0; phiIdx<phi_tab_length; phiIdx++)
                {
                        dN_ptdptdphidy->set(i+1,j+1,dN_pTdpTdphidy[pTIdx + pT_tab_length*phiIdx + i*pT_tab_length*phi_tab_length]);
                        CALCULATEDED3P ==0;
                        //if(CALCULATEDED3P == 1)
                        //      dE_ptdptdphidy->set(i+1,j+1,dE_ptdptdphidy_tab[i][j]);
                        write_dN_ptdptdphidy_toFile();
                }
        }
	

        //Free Memory
        cudaFree( mass_d );
        cudaFree( sign_d );
        cudaFree( degen_d );
        cudaFree( baryon_d );
        cudaFree( pT_d );
        cudaFree( trig_d );
        cudaFree( hyperTrig_d );
        cudaFree( delta_eta_d );
        cudaFree( Tdec_d );
        cudaFree( Pdec_d );
        cudaFree( Edec_d );
        cudaFree( mu_d );
        cudaFree( tau_d );
        cudaFree( gammaT_d );
        cudaFree( ux_d );
        cudaFree( uy_d );
        cudaFree( da0_d );
        cudaFree( da1_d );
        cudaFree( da2_d );
        cudaFree( pi00_d );
        cudaFree( pi01_d );
        cudaFree( pi02_d );
        cudaFree( pi11_d );
        cudaFree( pi12_d );
        cudaFree( pi22_d );
        cudaFree( pi33_d );
        cudaFree( dN_pTdpTdphidy_d );
*/
}

#endif
